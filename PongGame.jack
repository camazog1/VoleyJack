class PongGame {

    static PongGame instance;   
    field Bat bat;
    field Bat bat_2;
    field Ball ball;
    field int wall;     
    field boolean exit; 
    field boolean exitBat1;
    field boolean exitBat2;
    field int score; 
    field int lastWall;  
    field int loser;
   
    field int batWidth;

    constructor PongGame new() {
	    do Screen.clearScreen();
        let batWidth = 50; 
        let bat = Bat.new(360, 229, batWidth, 7);
        let bat_2 = Bat.new(100, 229, batWidth, 7);
        let ball = Ball.new(253, 222, 0, 511, 0, 229);
        do ball.setDestination(400,0);
        do Screen.drawRectangle(0, 238, 511, 240);
        do Screen.drawRectangle(512 - 5 / 2, 0, 512 + 5 / 2, 255);
	
	    let exit = false;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    function PongGame getInstance() {
        return instance;
    }

    method void run() {
        var char key;

        while (~exit) {

            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move(1);
                do bat_2.move(2);
                do moveBall();
                do Screen.drawRectangle(512 - 5 / 2, 0, 512 + 5 / 2, 256);
                do Sys.wait(50);
            }

            if (key = 130) { do bat.setDirection(1); }
            else {
                if (key = 132) { do bat.setDirection(2); }
                else {
                    if (key = 140) { let exit = true; }
                    else {
                        if (key = 97) { do bat_2.setDirection(1); }
                        else {
                            if (key = 100) { do bat_2.setDirection(2); }
                        }
                    }
                }
            }

            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move(1);
                do bat_2.move(2);
                do moveBall();
                do Screen.drawRectangle(512 - 5 / 2, 0, 512 + 5 / 2, 256);
                do Sys.wait(50);
            }
        }

        // Verifica el resultado al salir
        if (exit) {
            do Output.moveCursor(10, 27);
            do Output.printString("Fin del Juego");
        }

        return;
    }

    method void moveBall() {
        var int bouncingDirection, batLeft, batRight, batRight_2, batLeft_2, ballLeft, ballRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            let batLeft = bat.getLeft();
            let batRight = bat.getRight();
            let batRight_2 = bat_2.getRight();
            let batLeft_2 = bat_2.getLeft();
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();

            if (wall = 4) {
                let exitBat1 = (batRight < ballLeft) | (batLeft > ballRight); 
                if (~exitBat1) {let loser = 1;}
                let exitBat2 = (batRight_2 < ballLeft) | (batLeft_2 > ballRight);
                if (~exitBat2) {let loser = 2;}
                
                if (exitBat1 & exitBat2) { let exit = true;} 
                else {

                    if (ballRight < (batLeft + 10)) { 
                        let bouncingDirection = -1; 
                    } else {
                        if (ballLeft > (batRight - 10)) { 
                            let bouncingDirection = 1; 
                        }
                    }

                    let batWidth = batWidth;
                    do bat.setWidth(batWidth);      
                    let score = score + 1;
                }
            }

            do ball.bounce(bouncingDirection);
        }
        return;
    }
}